import { FitAddon } from '@xterm/addon-fit';
import { SearchAddon } from '@xterm/addon-search';
import { Unicode11Addon } from '@xterm/addon-unicode11';
import { WebLinksAddon } from '@xterm/addon-web-links';
import { WebglAddon } from '@xterm/addon-webgl';
import { Terminal } from '@xterm/xterm';
import { createEffect, createSignal, onCleanup } from 'solid-js';
import { createStore } from 'solid-js/store';
import { z } from 'zod';

import {
  CommandSchema,
  INITIAL_DIR,
  MAX_HISTORY_SIZE,
  TERMINAL_OPTIONS,
  TerminalStateSchema,
  WS_RECONNECT_CONFIG,
  WS_URL,
  WebSocketMessageSchema,
} from '../types/terminal';

import type {
  TerminalReturn,
  TerminalState,
  WebSocketError,
  WebSocketMessage,
} from '../types/terminal';

/**
 * „Çø„Éº„Éü„Éä„É´„Ç®„Éü„É•„É¨„Éº„Çø„ÅÆÂÆüË£Ö
 *
 * „Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅØ„ÄÅ„Éñ„É©„Ç¶„Ç∂‰∏ä„ÅßÂãï‰Ωú„Åô„Çã„Çø„Éº„Éü„Éä„É´„Ç®„Éü„É•„É¨„Éº„Çø„ÅÆ‰∏ªË¶Å„Å™Ê©üËÉΩ„ÇíÂÆüË£Ö„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ
 * ‰∏ª„Å™Ê©üËÉΩ:
 * - WebSocket„Çí‰ΩøÁî®„Åó„Åü„Çµ„Éº„Éê„Éº„Å®„ÅÆÈÄö‰ø°
 * - „Çø„Éº„Éü„Éä„É´„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ
 * - „Ç≥„Éû„É≥„ÉâÂ±•Ê≠¥„ÅÆÁÆ°ÁêÜ
 * - „Ç≠„Éº„Éú„Éº„ÉâÂÖ•Âäõ„ÅÆÂá¶ÁêÜ
 * - „Çø„Éº„Éü„Éä„É´„ÅÆË°®Á§∫Âà∂Âæ°
 */

/**
 * „Çø„Éº„Éü„Éä„É´„ÅÆÂàùÊúüÁä∂ÊÖã„ÇíÂÆöÁæ©„Åô„ÇãÈñ¢Êï∞
 *
 * @returns {TerminalState} ÂàùÊúüÂåñ„Åï„Çå„Åü„Çø„Éº„Éü„Éä„É´„ÅÆÁä∂ÊÖã
 *
 * Áä∂ÊÖã„Å´„ÅØ‰ª•‰∏ã„ÅÆÊÉÖÂ†±„ÅåÂê´„Åæ„Çå„Åæ„Åô:
 * - isConnected: WebSocketÊé•Á∂ö„ÅÆÁä∂ÊÖã
 * - isSubscribed: ActionCable„ÉÅ„É£„É≥„Éç„É´„ÅÆË≥ºË™≠Áä∂ÊÖã
 * - isReadyForInput: „Ç≥„Éû„É≥„ÉâÂÖ•ÂäõÂèØËÉΩ„Å™Áä∂ÊÖã„Åã„Å©„ÅÜ„Åã
 * - currentDir: ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„Éë„Çπ
 * - username: ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºÂêç
 * - commandHistory: „Ç≥„Éû„É≥„ÉâÂ±•Ê≠¥„ÅÆÈÖçÂàó
 * - historyIndex: „Ç≥„Éû„É≥„ÉâÂ±•Ê≠¥„ÅÆÁèæÂú®„ÅÆ‰ΩçÁΩÆ
 * - isProcessingCommand: „Ç≥„Éû„É≥„ÉâÂÆüË°å‰∏≠„Åã„Å©„ÅÜ„Åã
 */
function createInitialState(): TerminalState {
  return TerminalStateSchema.parse({
    isConnected: false,
    isSubscribed: false,
    isReadyForInput: false,
    currentDir: INITIAL_DIR,
    username: 'nonroot',
    commandHistory: [],
    historyIndex: -1,
    isProcessingCommand: false,
  });
}

/**
 * WebSocketÊé•Á∂ö„ÇíÁÆ°ÁêÜ„Åô„ÇãÈñ¢Êï∞
 */
function createWebSocketManager(
  sessionId: () => string,
  setSessionId: (id: string) => void,
  term: Terminal,
  setStore: (fn: (state: TerminalState) => Partial<TerminalState>) => void,
  initialState: TerminalState,
  _commandBuffer: () => string,
  setCommandBuffer: (fn: (prev: string) => string) => void,
  _cursorPosition: () => number,
  setCursorPosition: (fn: (prev: number) => number) => void
) {
  const [ws, setWs] = createSignal<WebSocket | null>(null);
  const [reconnectAttempts, setReconnectAttempts] = createSignal(0);
  const [reconnectTimeout, setReconnectTimeout] = createSignal<number | null>(
    null
  );
  const [currentState, setCurrentState] = createSignal(initialState);

  /**
   * „Éó„É≠„É≥„Éó„Éà„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
   *
   * Ë°®Á§∫ÂÜÖÂÆπ:
   * - „É¶„Éº„Ç∂„ÉºÂêçÔºàÁ∑ëËâ≤Ôºâ
   * - „Éõ„Çπ„ÉàÂêç
   * - ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™ÔºàÈùíËâ≤Ôºâ
   * - „Éó„É≠„É≥„Éó„ÉàË®òÂè∑Ôºà$Ôºâ
   *
   * Ê≥®ÊÑè:
   * - „Çø„Éº„Éü„Éä„É´„ÅåÊ∫ñÂÇôÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØË°®Á§∫„Åó„Å™„ÅÑ
   * - Ë°®Á§∫Âæå„Å´„Ç≥„Éû„É≥„Éâ„Éê„ÉÉ„Éï„Ç°„Å®„Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„Çí„É™„Çª„ÉÉ„Éà
   */
  const writePrompt = () => {
    if (!currentState().isReadyForInput) return;
    const username = currentState().username || 'nonroot';
    const hostname = 'terminal';
    term.write(
      `\x1b[32m${username}@${hostname}\x1b[0m:\x1b[34m${currentState().currentDir}\x1b[0m $ `
    );
    setCommandBuffer(() => '');
    setCursorPosition(() => 0);
  };

  /**
   * ÁèæÂú®„ÅÆË°å„Çí„ÇØ„É™„Ç¢„Åó„Å¶Êñ∞„Åó„ÅÑ„Ç≥„Éû„É≥„Éâ„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
   *
   * Âá¶ÁêÜÂÜÖÂÆπ:
   * 1. ÁèæÂú®„ÅÆË°å„Çí„ÇØ„É™„Ç¢
   * 2. „Éó„É≠„É≥„Éó„Éà„ÇíÂÜçË°®Á§∫
   * 3. Êñ∞„Åó„ÅÑ„Ç≥„Éû„É≥„Éâ„ÇíË°®Á§∫
   * 4. „Ç≥„Éû„É≥„Éâ„Éê„ÉÉ„Éï„Ç°„Å®„Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„ÇíÊõ¥Êñ∞
   *
   * Ê≥®ÊÑè:
   * - „Çø„Éº„Éü„Éä„É´„ÅåÊ∫ñÂÇôÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
   */
  const clearAndWriteCommand = (command: string) => {
    if (!currentState().isReadyForInput) return;
    const username = currentState().username || 'nonroot';
    const hostname = 'terminal';
    term.write('\r');
    term.write(
      `\x1b[32m${username}@${hostname}\x1b[0m:\x1b[34m${currentState().currentDir}\x1b[0m $ `
    );
    term.write('\x1b[K');
    setCommandBuffer(() => command);
    setCursorPosition(() => command.length);
    term.write(command);
  };

  const updateState = (update: Partial<TerminalState>) => {
    setCurrentState((prev) => ({ ...prev, ...update }));
    setStore(() => update);
  };

  /**
   * WebSocket„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂá¶ÁêÜ„Åô„ÇãÈñ¢Êï∞
   *
   * @param {WebSocketMessage} data - Âèó‰ø°„Åó„ÅüWebSocket„É°„ÉÉ„Çª„Éº„Ç∏
   *
   * Âá¶ÁêÜÂÜÖÂÆπ:
   * 1. „É°„ÉÉ„Çª„Éº„Ç∏„Åå„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÂ†¥Âêà:
   *    - pwd: ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÊõ¥Êñ∞
   *    - username: „É¶„Éº„Ç∂„ÉºÂêç„ÇíÊõ¥Êñ∞
   *    - error: „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
   *    - result: „Ç≥„Éû„É≥„ÉâÂÆüË°åÁµêÊûú„ÇíË°®Á§∫
   *      - ls„Ç≥„Éû„É≥„Éâ„ÅÆÂ†¥Âêà„ÅØÁâπÂà•„Å™Ë°®Á§∫Âá¶ÁêÜ„ÇíÂÆüÊñΩ
   * 2. „É°„ÉÉ„Çª„Éº„Ç∏„ÅåÊñáÂ≠óÂàó„ÅÆÂ†¥Âêà:
   *    - „Åù„ÅÆ„Åæ„Åæ„Çø„Éº„Éü„Éä„É´„Å´Ë°®Á§∫
   */
  const handleMessage = (data: WebSocketMessage) => {
    if (!data.message) return;

    if (typeof data.message === 'object' && data.message !== null) {
      if ('pwd' in data.message && typeof data.message.pwd === 'string') {
        updateState({ currentDir: data.message.pwd });
      }

      if (
        'username' in data.message &&
        typeof data.message.username === 'string'
      ) {
        updateState({ username: data.message.username });
      }

      if ('error' in data.message && typeof data.message.error === 'string') {
        term.write(`\x1b[31m‚ùå „Ç®„É©„Éº: ${data.message.error}\x1b[0m\r\n`);
        if (data.message.result?.trim()) {
          term.write(data.message.result + '\r\n');
        }
      } else if (data.message.result?.trim()) {
        // ls„Ç≥„Éû„É≥„Éâ„ÅÆÂá∫Âäõ„ÇíÁâπÂà•„Å´Âá¶ÁêÜ
        const command = data.message.command ?? '';
        if (typeof command === 'string' && command.trim().startsWith('ls')) {
          const items = data.message.result.split('\n').filter(Boolean);

          // ls -l „Åæ„Åü„ÅØ ls -la „ÅÆÂ†¥Âêà„ÄÅË©≥Á¥∞Ë°®Á§∫„É¢„Éº„Éâ„ÅßÂá¶ÁêÜ
          if (command.includes('-l')) {
            // ÂêÑË°å„ÇíÂÄãÂà•„Å´Ë°®Á§∫
            for (const line of items) {
              term.write(line + '\r\n');
            }
          } else {
            // ÈÄöÂ∏∏„ÅÆlsË°®Á§∫Ôºà„Çø„Éº„Éü„Éä„É´„ÅÆÂπÖ„Å´Âêà„Çè„Åõ„Å¶Ë°®Á§∫„ÇíË™øÊï¥Ôºâ
            const width = term.cols;
            const maxItemLength =
              Math.max(...items.map((item) => item.length)) + 1;
            const minItemWidth = 12;
            const effectiveItemWidth = Math.max(maxItemLength, minItemWidth);
            const itemsPerLine = Math.floor(width / effectiveItemWidth);

            for (let i = 0; i < items.length; i += itemsPerLine) {
              const line = items
                .slice(i, i + itemsPerLine)
                .map((item) => item.padEnd(effectiveItemWidth))
                .join('');
              term.write(line + '\r\n');
            }
          }
        } else {
          term.write(data.message.result + '\r\n');
        }
      }
    } else {
      term.write(String(data.message) + '\r\n');
    }

    updateState({ isProcessingCommand: false });
    writePrompt();
  };

  const handleError = () => {
    updateState({
      isConnected: false,
      isSubscribed: false,
      isReadyForInput: false,
      isProcessingCommand: false,
    });
    attemptReconnect();
  };

  /**
   * WebSocketÊé•Á∂ö„ÅÆÂÜçÊé•Á∂ö„ÇíË©¶„Åø„ÇãÈñ¢Êï∞
   *
   * ÂÆüË£Ö„ÅÆÁâπÂæ¥:
   * - ÊåáÊï∞„Éê„ÉÉ„ÇØ„Ç™„ÉïÊñπÂºè„ÅßÂÜçÊé•Á∂öÈñìÈöî„ÇíË®àÁÆó
   * - ÊúÄÂ§ßË©¶Ë°åÂõûÊï∞„Å´ÈÅî„Åó„ÅüÂ†¥Âêà„ÅØÂÜçÊé•Á∂ö„Çí‰∏≠Ê≠¢
   * - „É¶„Éº„Ç∂„Éº„Å´ÂÜçÊé•Á∂öÁä∂ÊÖã„ÇíÈÄöÁü•
   */
  const attemptReconnect = () => {
    const timeout = reconnectTimeout();
    if (timeout) {
      window.clearTimeout(timeout);
    }

    if (reconnectAttempts() >= WS_RECONNECT_CONFIG.maxRetries) {
      term.writeln('\x1b[31m‚ùå ÂÜçÊé•Á∂ö„ÅÆË©¶Ë°åÂõûÊï∞„Åå‰∏äÈôê„Å´ÈÅî„Åó„Åæ„Åó„Åü\x1b[0m');
      return;
    }

    const delay = Math.min(
      WS_RECONNECT_CONFIG.initialDelay *
        Math.pow(WS_RECONNECT_CONFIG.backoffFactor, reconnectAttempts()),
      WS_RECONNECT_CONFIG.maxDelay
    );

    term.writeln(`\x1b[33müîÑ ${delay / 1000}ÁßíÂæå„Å´ÂÜçÊé•Á∂ö„ÇíË©¶„Åø„Åæ„Åô...\x1b[0m`);
    const newTimeout = window.setTimeout(() => {
      setReconnectAttempts((prev) => prev + 1);
      connect();
    }, delay);
    setReconnectTimeout(newTimeout);
  };

  /**
   * WebSocket„ÅÆ„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„ÇíË®≠ÂÆö„Åô„ÇãÈñ¢Êï∞
   *
   * Âá¶ÁêÜ„Åô„Çã„Ç§„Éô„É≥„Éà:
   * - onopen: Êé•Á∂öÁ¢∫Á´ãÊôÇ„ÅÆÂá¶ÁêÜ
   * - onmessage: „É°„ÉÉ„Çª„Éº„Ç∏Âèó‰ø°ÊôÇ„ÅÆÂá¶ÁêÜ
   *   - ping: ÁÑ°Ë¶ñ
   *   - welcome: ActionCableÊé•Á∂öÁ¢∫Á´ãÈÄöÁü•
   *   - confirm_subscription: „ÉÅ„É£„É≥„Éç„É´Ë≥ºË™≠Á¢∫Ë™ç
   *   - message: ÈÄöÂ∏∏„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏Âá¶ÁêÜ
   * - onclose: Êé•Á∂öÂàáÊñ≠ÊôÇ„ÅÆÂá¶ÁêÜ
   * - onerror: „Ç®„É©„ÉºÁô∫ÁîüÊôÇ„ÅÆÂá¶ÁêÜ
   */
  const setupEventHandlers = (socket: WebSocket) => {
    socket.onopen = () => {
      term.writeln('‚úÖ Êé•Á∂ö„Åó„Åæ„Åó„Åü');
      updateState({
        isConnected: true,
        isProcessingCommand: false,
      });
      setReconnectAttempts(0);

      socket.send(
        JSON.stringify({
          command: 'subscribe',
          identifier: JSON.stringify({
            channel: 'CommandChannel',
          }),
        })
      );
    };

    socket.onmessage = (event: MessageEvent) => {
      try {
        const data = WebSocketMessageSchema.parse(
          JSON.parse(event.data as string)
        );

        if (data.type === 'ping') return;

        if (data.type === 'session_id' && data.session_id) {
          setSessionId(data.session_id);
          term.writeln(`üîë „Çª„ÉÉ„Ç∑„Éß„É≥IDÂèó‰ø°: ${data.session_id}`);
          return;
        }

        if (data.type === 'welcome') {
          term.writeln('‚úÖ ActionCableÊé•Á∂ö„ÅåÁ¢∫Á´ã„Åï„Çå„Åæ„Åó„Åü');
          return;
        }

        if (data.type === 'confirm_subscription') {
          term.writeln('‚úÖ „ÉÅ„É£„É≥„Éç„É´„Å´„Çµ„Éñ„Çπ„ÇØ„É©„Ç§„Éñ„Åó„Åæ„Åó„Åü');
          updateState({
            isSubscribed: true,
            isReadyForInput: true,
          });
          writePrompt();
          return;
        }

        if (data.message) {
          handleMessage(data);
        }
      } catch (error) {
        console.error('WebSocket message processing error:', error);
        handleError();
      }
    };

    socket.onclose = () => {
      term.writeln('üîå Êé•Á∂ö„ÅåÈñâ„Åò„Çâ„Çå„Åæ„Åó„Åü');
      updateState({
        isConnected: false,
        isSubscribed: false,
        isReadyForInput: false,
        isProcessingCommand: false,
      });
      attemptReconnect();
    };

    socket.onerror = (event: Event) => {
      const error = event as WebSocketError;
      term.writeln(
        `\x1b[31m‚ö†Ô∏è „Ç®„É©„Éº: ${error.message ?? '‰∏çÊòé„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'}\x1b[0m`
      );
      handleError();
    };
  };

  const connect = () => {
    if (ws()?.readyState === WebSocket.OPEN) return;

    const socket = new WebSocket(WS_URL);
    setWs(socket);
    setupEventHandlers(socket);
  };

  /**
   * WebSocketÁµåÁî±„Åß„Ç≥„Éû„É≥„Éâ„ÇíÈÄÅ‰ø°„Åô„ÇãÈñ¢Êï∞
   *
   * Âá¶ÁêÜÂÜÖÂÆπ:
   * 1. „Ç≥„Éû„É≥„Éâ„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
   * 2. WebSocketÊé•Á∂ö„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç
   * 3. „Ç≥„Éû„É≥„Éâ„ÅÆÈÄÅ‰ø°
   *
   * „Ç®„É©„ÉºÂá¶ÁêÜ:
   * - „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº: „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
   * - ÈÄÅ‰ø°Â§±Êïó: „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
   *
   * @returns {boolean} „Ç≥„Éû„É≥„Éâ„ÅÆÈÄÅ‰ø°„ÅåÊàêÂäü„Åó„Åü„Åã„Å©„ÅÜ„Åã
   */
  const sendCommand = (command: string): boolean => {
    const currentSessionId = sessionId();
    if (!currentSessionId) {
      term.writeln('\x1b[31m‚ùå „Çª„ÉÉ„Ç∑„Éß„É≥ID„Åå„Åæ„Å†Âèó‰ø°„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì\x1b[0m');
      return false;
    }

    try {
      const validatedCommand = CommandSchema.parse({
        command,
        session_id: currentSessionId,
      });

      const socket = ws();
      if (socket?.readyState === WebSocket.OPEN) {
        socket.send(
          JSON.stringify({
            command: 'message',
            identifier: JSON.stringify({
              channel: 'CommandChannel',
            }),
            data: JSON.stringify({
              action: 'execute_command',
              command: validatedCommand,
            }),
          })
        );
        return true;
      }
      return false;
    } catch (error) {
      if (error instanceof z.ZodError) {
        term.writeln(
          `\x1b[31m‚ùå „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº: ${error.errors[0].message}\x1b[0m`
        );
      } else {
        term.writeln('\x1b[31m‚ùå „Ç≥„Éû„É≥„Éâ„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü\x1b[0m');
      }
      return false;
    }
  };

  /**
   * WebSocketÊé•Á∂ö„ÇíÂàáÊñ≠„Åô„ÇãÈñ¢Êï∞
   *
   * Âá¶ÁêÜÂÜÖÂÆπ:
   * 1. ÂÜçÊé•Á∂ö„Çø„Ç§„Éû„Éº„ÅÆ„ÇØ„É™„Ç¢
   * 2. WebSocketÊé•Á∂ö„ÅÆÂàáÊñ≠
   * 3. WebSocket„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆ„ÇØ„É™„Ç¢
   */
  const disconnect = () => {
    const timeout = reconnectTimeout();
    if (timeout) {
      window.clearTimeout(timeout);
      setReconnectTimeout(null);
    }
    const socket = ws();
    if (socket) {
      socket.close();
      setWs(null);
    }
  };

  return {
    connect,
    disconnect,
    sendCommand,
    writePrompt,
    clearAndWriteCommand,
  };
}

/**
 * „Çø„Éº„Éü„Éä„É´„ÅÆÂàùÊúüÂåñ„Å®Áä∂ÊÖãÁÆ°ÁêÜ„ÇíË°å„ÅÜÈñ¢Êï∞
 *
 * @param {HTMLDivElement} container - „Çø„Éº„Éü„Éä„É´„ÇíË°®Á§∫„Åô„ÇãDOMË¶ÅÁ¥†
 * @returns {TerminalReturn} „Çø„Éº„Éü„Éä„É´„ÅÆÊìç‰Ωú„Å´ÂøÖË¶Å„Å™Èñ¢Êï∞„Å®Áä∂ÊÖã
 *
 * ‰∏ª„Å™Ê©üËÉΩ:
 * - „Çø„Éº„Éü„Éä„É´„ÅÆÂàùÊúüÂåñ„Å®Ë®≠ÂÆö
 * - ÂêÑÁ®Æ„Ç¢„Éâ„Ç™„É≥„ÅÆÈÅ©Áî®ÔºàFit, WebLinks, Search, Unicode11, WebGLÔºâ
 * - „Ç≠„Éº„Éú„Éº„ÉâÂÖ•Âäõ„ÅÆÂá¶ÁêÜ
 * - „Ç≥„Éû„É≥„Éâ„ÅÆÂÆüË°å
 * - Áä∂ÊÖãÁÆ°ÁêÜ
 * - „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂá¶ÁêÜ
 */
export function createTerm(container: HTMLDivElement): TerminalReturn {
  // Áä∂ÊÖãÁÆ°ÁêÜ
  const [store, setStore] = createStore<TerminalState>(createInitialState());
  const [sessionId, setSessionId] = createSignal('');

  // „Ç≥„Éû„É≥„Éâ„Éê„ÉÉ„Éï„Ç°„ÅÆÁÆ°ÁêÜ
  const [commandBuffer, setCommandBuffer] = createSignal('');
  const [cursorPosition, setCursorPosition] = createSignal(0);

  // „Çø„Éº„Éü„Éä„É´„ÅÆÂàùÊúüÂåñ
  const term = new Terminal(TERMINAL_OPTIONS);

  // „Ç¢„Éâ„Ç™„É≥„ÅÆÈÅ©Áî®
  const fit = new FitAddon();
  term.loadAddon(fit);
  term.loadAddon(new WebLinksAddon());
  term.loadAddon(new SearchAddon());
  term.loadAddon(new Unicode11Addon());

  // WebGL„Ç¢„Éâ„Ç™„É≥„ÅÆÈÅ©Áî®
  let webglAddon: WebglAddon | undefined;
  try {
    webglAddon = new WebglAddon();
    term.loadAddon(webglAddon);
    webglAddon.onContextLoss(() => {
      if (webglAddon) {
        webglAddon.dispose();
        webglAddon = undefined;
      }
      console.warn('WebGL context was lost, falling back to canvas renderer');
    });
  } catch (e) {
    console.warn(
      'WebGL addon could not be loaded, falling back to canvas renderer:',
      e
    );
  }

  // ÊèèÁîª & „Éï„Ç£„ÉÉ„Éà
  term.open(container);
  fit.fit();

  // ÂàùÊúü„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË°®Á§∫
  term.writeln(`üîå Êé•Á∂öÂÖà: ${WS_URL}`);
  term.writeln(`üîë „Çª„ÉÉ„Ç∑„Éß„É≥ID: „Çµ„Éº„Éê„Éº„Åã„ÇâÂèó‰ø°‰∏≠...`);

  const wsManager = createWebSocketManager(
    sessionId,
    setSessionId,
    term,
    setStore,
    store,
    commandBuffer,
    setCommandBuffer,
    cursorPosition,
    setCursorPosition
  );

  // „Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åô„ÇãÈñ¢Êï∞
  const executeCommand = (command: string) => {
    if (!command.trim()) {
      wsManager.writePrompt();
      return;
    }

    // „Ç≥„Éû„É≥„Éâ„Éê„ÉÉ„Éï„Ç°„Çí„ÇØ„É™„Ç¢
    setCommandBuffer(() => '');
    setCursorPosition(() => 0);

    setStore((state) => ({
      isProcessingCommand: true,
      commandHistory: [...state.commandHistory, command].slice(
        -MAX_HISTORY_SIZE
      ),
      historyIndex: -1,
    }));

    if (!wsManager.sendCommand(command)) {
      setStore(() => ({ isProcessingCommand: false }));
      wsManager.writePrompt();
    }
  };

  // WebSocketÊé•Á∂ö„ÅÆÈñãÂßã
  wsManager.connect();

  // „Ç≠„ÉºÂÖ•Âäõ„ÅÆÂá¶ÁêÜ
  /**
   * „Ç≠„Éº„Éú„Éº„ÉâÂÖ•Âäõ„Éè„É≥„Éâ„É©„Éº
   *
   * Âá¶ÁêÜ„Åô„Çã„Ç≠„ÉºÂÖ•Âäõ:
   * - Tab: ÁÑ°ÂäπÂåñÔºà„Éá„Éï„Ç©„É´„Éà„ÅÆË£úÂÆåÊ©üËÉΩ„ÇíÈò≤Ê≠¢Ôºâ
   * - Ctrl+C: „Ç≥„Éû„É≥„Éâ‰∏≠Êñ≠
   * - Enter: „Ç≥„Éû„É≥„ÉâÂÆüË°å
   * - Backspace: ÊñáÂ≠óÂâäÈô§
   * - Áü¢Âç∞„Ç≠„Éº:
   *   - Â∑¶Âè≥: „Ç´„Éº„ÇΩ„É´ÁßªÂãï
   *   - ‰∏ä‰∏ã: „Ç≥„Éû„É≥„ÉâÂ±•Ê≠¥„ÅÆÊìç‰Ωú
   * - „Åù„ÅÆ‰ªñ: ÈÄöÂ∏∏„ÅÆÊñáÂ≠óÂÖ•Âäõ
   *
   * Âà∂Èôê‰∫ãÈ†Ö:
   * - „Ç≥„Éû„É≥„ÉâÂÆüË°å‰∏≠„ÅØÂÖ•Âäõ„ÇíÁÑ°Ë¶ñ
   * - „Çø„Éº„Éü„Éä„É´„ÅåÊ∫ñÂÇôÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÂÖ•Âäõ„ÇíÁÑ°Ë¶ñ
   */
  createEffect(() => {
    const handler = ({
      key,
      domEvent,
    }: {
      key: string;
      domEvent: KeyboardEvent;
    }) => {
      if (!store.isReadyForInput || store.isProcessingCommand) return;

      // „Çø„Éñ„Ç≠„Éº„ÇíÁÑ°ÂäπÂåñ
      if (domEvent.code === 'Tab') {
        domEvent.preventDefault();
        return;
      }

      const printable =
        !domEvent.altKey && !domEvent.ctrlKey && !domEvent.metaKey;

      // Ctrl+C„ÅÆÂá¶ÁêÜ
      if (domEvent.ctrlKey && domEvent.code === 'KeyC') {
        term.write('^C\r\n');
        setStore('historyIndex', -1);
        wsManager.writePrompt();
        return;
      }

      // Enter„Ç≠„Éº„ÅÆÂá¶ÁêÜ
      if (domEvent.code === 'Enter') {
        if (commandBuffer().trim()) {
          term.write('\r\n');
          executeCommand(commandBuffer());
        } else {
          term.write('\r\n');
          wsManager.writePrompt();
        }
        return;
      }

      // Backspace„Ç≠„Éº„ÅÆÂá¶ÁêÜ
      if (domEvent.code === 'Backspace') {
        if (cursorPosition() > 0) {
          setCommandBuffer((prev) => prev.slice(0, -1));
          setCursorPosition((prev) => prev - 1);
          term.write('\b \b');
        }
        return;
      }

      // Áü¢Âç∞„Ç≠„Éº„ÅÆÂá¶ÁêÜ
      if (domEvent.code === 'ArrowLeft') {
        if (cursorPosition() > 0) {
          setCursorPosition((prev) => prev - 1);
          term.write('\x1b[D');
        }
        return;
      }

      if (domEvent.code === 'ArrowRight') {
        if (cursorPosition() < commandBuffer().length) {
          setCursorPosition((prev) => prev + 1);
          term.write('\x1b[C');
        }
        return;
      }

      if (domEvent.code === 'ArrowUp') {
        if (store.historyIndex < store.commandHistory.length - 1) {
          setStore('historyIndex', store.historyIndex + 1);
          const command =
            store.commandHistory[
              store.commandHistory.length - 1 - store.historyIndex
            ];
          wsManager.clearAndWriteCommand(command);
        }
        return;
      }

      if (domEvent.code === 'ArrowDown') {
        if (store.historyIndex > 0) {
          setStore('historyIndex', store.historyIndex - 1);
          const command =
            store.commandHistory[
              store.commandHistory.length - 1 - store.historyIndex
            ];
          wsManager.clearAndWriteCommand(command);
        } else if (store.historyIndex === 0) {
          setStore('historyIndex', -1);
          wsManager.clearAndWriteCommand('');
        }
        return;
      }

      // ÈÄöÂ∏∏„ÅÆÊñáÂ≠óÂÖ•Âäõ
      if (printable) {
        setStore('historyIndex', -1);
        setCommandBuffer((prev) => prev + key);
        setCursorPosition((prev) => prev + 1);
        term.write(key);
      }
    };

    term.onKey(handler);
    onCleanup(() => {
      // „Ç≠„Éº„Éè„É≥„Éâ„É©„Éº„ÅØterm.dispose()„ÅßËá™ÂãïÁöÑ„Å´„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Åï„Çå„Çã
    });
  });

  // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÈñ¢Êï∞
  const dispose = () => {
    try {
      if (webglAddon) {
        webglAddon.dispose();
      }
      wsManager.disconnect();
      term.dispose();
    } catch {
      // ignore
    }
  };

  onCleanup(dispose);

  return {
    term,
    store,
    dispose,
    executeCommand,
  };
}
