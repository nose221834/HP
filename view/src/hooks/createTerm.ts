import { FitAddon } from '@xterm/addon-fit';
import { SearchAddon } from '@xterm/addon-search';
import { Unicode11Addon } from '@xterm/addon-unicode11';
import { WebLinksAddon } from '@xterm/addon-web-links';
import { WebglAddon } from '@xterm/addon-webgl';
import { Terminal } from '@xterm/xterm';

interface WebSocketMessage {
  type?: string;
  message?: {
    result?: string;
    error?: string;
    pwd?: string;
  };
  identifier?: string;
}

interface WebSocketError extends Event {
  message?: string;
}

/**
 * ÂàùÊúüÂåñÊ∏à„Åø„ÅÆ Terminal „Ç§„É≥„Çπ„Çø„É≥„Çπ„Å® dispose Èñ¢Êï∞„ÇíËøî„Åô„ÄÇ
 * @param container „Çø„Éº„Éü„Éä„É´„ÇíÊèèÁîª„Åô„Çã HTMLDivElement
 */
export function createTerm(container: HTMLDivElement): {
  term: Terminal;
  dispose: () => void;
  executeCommand: (command: string) => void;
} {
  // Terminal „ÅÆÂàùÊúüÂåñ
  const term = new Terminal({
    convertEol: true,
    cursorBlink: true,
    allowProposedApi: true,
  });

  // FitAddon „ÅÆÈÅ©Áî®
  const fit = new FitAddon();
  term.loadAddon(fit);

  // „Åù„ÅÆ‰ªñ„ÅÆÊ®ôÊ∫ñ„Ç¢„Éâ„Ç™„É≥
  term.loadAddon(new WebLinksAddon());
  term.loadAddon(new SearchAddon());
  term.loadAddon(new Unicode11Addon());

  // WebGL„Ç¢„Éâ„Ç™„É≥„ÅÆÈÅ©Áî®
  let webglAddon: WebglAddon | undefined;
  try {
    webglAddon = new WebglAddon();
    term.loadAddon(webglAddon);
    // WebGL„ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
    webglAddon.onContextLoss(() => {
      if (webglAddon) {
        webglAddon.dispose();
        webglAddon = undefined;
      }
      console.warn('WebGL context was lost, falling back to canvas renderer');
    });
  } catch (e) {
    console.warn(
      'WebGL addon could not be loaded, falling back to canvas renderer:',
      e
    );
  }

  // ÊèèÁîª & „Éï„Ç£„ÉÉ„Éà
  term.open(container);
  fit.fit();

  // WebSocketÊé•Á∂ö„ÅÆË®≠ÂÆö
  const wsHost =
    window.location.hostname === 'localhost' ? 'localhost' : '192.168.97.1';
  const ws = new WebSocket(`ws://${wsHost}:8000/api/v1/cable`);
  const sessionId = crypto.randomUUID();

  // ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰øùÊåÅ
  let currentDir = '/home/nonroot';
  let commandBuffer = '';
  let cursorPosition = 0;
  let isProcessingCommand = false;
  let isInitialConnection = true;
  let isReadyForInput = false; // ÂÖ•Âäõ„ÇíË®±ÂèØ„Åô„Çã„Åã„Å©„ÅÜ„Åã„ÅÆ„Éï„É©„Ç∞

  // „Ç≥„Éû„É≥„ÉâÂ±•Ê≠¥„ÅÆÁÆ°ÁêÜ
  const commandHistory: string[] = [];
  let historyIndex = -1; // ÁèæÂú®„ÅÆÂ±•Ê≠¥‰ΩçÁΩÆÔºà-1„ÅØÁèæÂú®„ÅÆ„Ç≥„Éû„É≥„ÉâÂÖ•Âäõ‰∏≠Ôºâ

  // „Éó„É≠„É≥„Éó„Éà„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
  const writePrompt = () => {
    if (!isReadyForInput) return; // Ê∫ñÂÇô„Åå„Åß„Åç„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„Éó„É≠„É≥„Éó„Éà„ÇíË°®Á§∫„Åó„Å™„ÅÑ
    term.write('\r\n');
    term.write(`\x1b[32m${currentDir}\x1b[0m $ `);
    cursorPosition = 0;
    commandBuffer = '';
    historyIndex = -1; // „Éó„É≠„É≥„Éó„ÉàË°®Á§∫ÊôÇ„Å´Â±•Ê≠¥‰ΩçÁΩÆ„Çí„É™„Çª„ÉÉ„Éà
  };

  // ÁèæÂú®„ÅÆË°å„Çí„ÇØ„É™„Ç¢„Åó„Å¶Êñ∞„Åó„ÅÑ„Ç≥„Éû„É≥„Éâ„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞
  const clearAndWriteCommand = (command: string) => {
    if (!isReadyForInput) return; // Ê∫ñÂÇô„Åå„Åß„Åç„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
    term.write('\r');
    term.write(`\x1b[32m${currentDir}\x1b[0m $ `);
    term.write('\x1b[K'); // „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„Åã„ÇâË°åÊú´„Åæ„Åß„ÇØ„É™„Ç¢

    // Êñ∞„Åó„ÅÑ„Ç≥„Éû„É≥„Éâ„ÇíË°®Á§∫
    commandBuffer = command;
    cursorPosition = command.length;
    term.write(command);
  };

  // ÂàùÊúü„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË°®Á§∫
  term.writeln(`üîå Êé•Á∂öÂÖà: ws://${wsHost}:8000/api/v1/cable`);
  term.writeln(`üîë „Çª„ÉÉ„Ç∑„Éß„É≥ID: ${sessionId}`);

  // „Ç≠„ÉºÂÖ•Âäõ„ÅÆÂá¶ÁêÜ
  term.onKey(({ key, domEvent }) => {
    if (!isReadyForInput || isProcessingCommand) return; // Ê∫ñÂÇô„Åå„Åß„Åç„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØÂÖ•Âäõ„ÇíÁÑ°Ë¶ñ

    // „Çø„Éñ„Ç≠„Éº„ÇíÁÑ°ÂäπÂåñ
    if (domEvent.code === 'Tab') {
      return;
    }

    const printable =
      !domEvent.altKey && !domEvent.ctrlKey && !domEvent.metaKey;

    // Ctrl+C„ÅÆÂá¶ÁêÜ
    if (domEvent.ctrlKey && domEvent.code === 'KeyC') {
      term.write('^C\r\n');
      commandBuffer = '';
      cursorPosition = 0;
      writePrompt();
      return;
    }

    if (domEvent.code === 'Enter') {
      // Enter
      if (commandBuffer.trim()) {
        term.write('\r\n');
        commandHistory.push(commandBuffer);
        if (commandHistory.length > 100) {
          commandHistory.shift();
        }
        executeCommand(commandBuffer);
      } else {
        writePrompt();
      }
    } else if (domEvent.code === 'Backspace') {
      // Backspace
      if (cursorPosition > 0) {
        commandBuffer = commandBuffer.slice(0, -1);
        cursorPosition--;
        term.write('\b \b');
      }
    } else if (domEvent.code === 'ArrowLeft') {
      // Left arrow
      if (cursorPosition > 0) {
        cursorPosition--;
        term.write('\x1b[D');
      }
    } else if (domEvent.code === 'ArrowRight') {
      // Right arrow
      if (cursorPosition < commandBuffer.length) {
        cursorPosition++;
        term.write('\x1b[C');
      }
    } else if (domEvent.code === 'ArrowUp') {
      // Up arrow - Â±•Ê≠¥„ÇíÈÅ°„Çã
      if (historyIndex < commandHistory.length - 1) {
        historyIndex++;
        const command =
          commandHistory[commandHistory.length - 1 - historyIndex];
        clearAndWriteCommand(command);
      }
    } else if (domEvent.code === 'ArrowDown') {
      // Down arrow - Â±•Ê≠¥„ÇíÈÄ≤„ÇÄ
      if (historyIndex > 0) {
        historyIndex--;
        const command =
          commandHistory[commandHistory.length - 1 - historyIndex];
        clearAndWriteCommand(command);
      } else if (historyIndex === 0) {
        historyIndex = -1;
        clearAndWriteCommand('');
      }
    } else if (printable) {
      // ÈÄöÂ∏∏„ÅÆÊñáÂ≠óÂÖ•ÂäõÊôÇ„ÅØÂ±•Ê≠¥‰ΩçÁΩÆ„Çí„É™„Çª„ÉÉ„Éà
      historyIndex = -1;
      commandBuffer += key;
      cursorPosition++;
      term.write(key);
    }
  });

  ws.onopen = () => {
    term.writeln('‚úÖ Êé•Á∂ö„Åó„Åæ„Åó„Åü');
    // ActionCable„ÅÆÊé•Á∂öÁ¢∫Á´ã„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°
    ws.send(
      JSON.stringify({
        command: 'subscribe',
        identifier: JSON.stringify({
          channel: 'CommandChannel',
        }),
      })
    );
  };

  ws.onmessage = (event: MessageEvent) => {
    try {
      const data = JSON.parse(event.data as string) as WebSocketMessage;

      // ping„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÂÆåÂÖ®„Å´ÁÑ°Ë¶ñ
      if (data.type === 'ping') {
        return;
      }

      // ÂàùÊúüÊé•Á∂öÊôÇ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÊúÄÂàù„ÅÆ1Âõû„Å†„ÅëË°®Á§∫
      if (isInitialConnection) {
        if (data.type === 'welcome') {
          term.writeln('‚úÖ ActionCableÊé•Á∂ö„ÅåÁ¢∫Á´ã„Åï„Çå„Åæ„Åó„Åü');
          return;
        }
        if (data.type === 'confirm_subscription') {
          term.writeln('‚úÖ „ÉÅ„É£„É≥„Éç„É´„Å´„Çµ„Éñ„Çπ„ÇØ„É©„Ç§„Éñ„Åó„Åæ„Åó„Åü');
          isInitialConnection = false;
          isReadyForInput = true; // Êé•Á∂ö„Å®„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„ÅåÂÆå‰∫Ü„Åó„Åü„ÇâÂÖ•Âäõ„ÇíË®±ÂèØ
          writePrompt(); // ÊúÄÂàù„ÅÆ„Éó„É≠„É≥„Éó„Éà„ÇíË°®Á§∫
          return;
        }
      }

      // „Ç≥„Éû„É≥„ÉâÂÆüË°åÁµêÊûú„ÅÆÂá¶ÁêÜ
      if (data.message) {
        // „Éá„Ç£„É¨„ÇØ„Éà„É™Â§âÊõ¥„ÅÆÂá¶ÁêÜ
        if (data.message.pwd) {
          currentDir = data.message.pwd;
        }

        // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÂá¶ÁêÜ
        if (data.message.error) {
          term.writeln(`\x1b[31m‚ùå „Ç®„É©„Éº: ${data.message.error}\x1b[0m`);
          if (data.message.result?.trim()) {
            term.writeln(data.message.result);
          }
        }
        // ÈÄöÂ∏∏„ÅÆ„Ç≥„Éû„É≥„ÉâÁµêÊûú„ÅÆÂá¶ÁêÜ
        else if (data.message.result?.trim()) {
          term.writeln(data.message.result);
        }

        // „Ç≥„Éû„É≥„ÉâÂÆüË°å„ÅåÂÆå‰∫Ü„Åó„Åü„ÇâÂøÖ„Åö„Éó„É≠„É≥„Éó„Éà„ÇíË°®Á§∫
        if (isProcessingCommand) {
          isProcessingCommand = false;
          writePrompt();
        }
      }
    } catch (error) {
      console.error('WebSocket message processing error:', error);
      if (isProcessingCommand) {
        isProcessingCommand = false;
        if (isReadyForInput) {
          writePrompt();
        }
      }
    }
  };

  ws.onclose = () => {
    term.writeln('üîå Êé•Á∂ö„ÅåÈñâ„Åò„Çâ„Çå„Åæ„Åó„Åü');
    isProcessingCommand = false;
    isReadyForInput = false; // Êé•Á∂ö„ÅåÂàá„Çå„Åü„ÇâÂÖ•Âäõ„ÇíÁÑ°ÂäπÂåñ
  };

  ws.onerror = (event: Event) => {
    const error = event as WebSocketError;
    term.writeln(
      `\x1b[31m‚ö†Ô∏è „Ç®„É©„Éº: ${error.message ?? '‰∏çÊòé„Å™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'}\x1b[0m`
    );
    isProcessingCommand = false;
    isReadyForInput = false; // „Ç®„É©„ÉºÊôÇ„ÇÇÂÖ•Âäõ„ÇíÁÑ°ÂäπÂåñ
  };

  // „Ç≥„Éû„É≥„ÉâÂÆüË°åÈñ¢Êï∞
  const executeCommand = (command: string) => {
    if (!command.trim()) {
      writePrompt();
      return;
    }

    const message = {
      command,
      session_id: sessionId,
    };

    isProcessingCommand = true;

    ws.send(
      JSON.stringify({
        command: 'message',
        identifier: JSON.stringify({
          channel: 'CommandChannel',
        }),
        data: JSON.stringify({
          action: 'execute_command',
          command: JSON.stringify(message),
        }),
      })
    );
  };

  // dispose Áî®„ÅÆÈñ¢Êï∞
  const dispose = () => {
    try {
      // WebGL„Ç¢„Éâ„Ç™„É≥„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
      if (webglAddon) {
        webglAddon.dispose();
      }
      ws.close();
      term.dispose();
    } catch {
      // ignore
    }
  };

  return { term, dispose, executeCommand };
}
